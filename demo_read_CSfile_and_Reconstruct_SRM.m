% Please run "demo_GAPTV_SRM' before running this code as this code will read
% the CS file generated by "demo_GAPTV_SRM"
%=============================

% read CS file and reconstruct with different algorithms

% Since the encoder only needs to run once and then we get the CS files
% with measurment and codign inforamtion inside, we can read the CS file
% and reconstruct the desired image using any other algorithms.

% After we run "demo_GAPTV_SRM.m", we have the CS file stored at 
%./test_data/Image and a folder with the filename 

% we can now read file and reconstruct them using different algorithms


% Xin Yuan & Raziel Haimi-Cohen
% Nokia Bell Labs
% xyuan@bell-labs.com;  eiexyuan@gmail.com; razihc@gmail.com 

% running time depends on the algorithm
% If you want to add new algorithm, please go to the folder
% ./JPEG_quant
% CSImgReconstruct is the interface to call different algorithms
% add the name of new algorithm in para.alg
% and call it using the dec_opts below

% Please run "demo_GAPTV_SRM' before running this code as this code will read
% the CS file generated by "demo_GAPTV_SRM"


clear all
close all
clc



cd ./tools/scripts
set_mex_path dbg-ng vc
cd ..
cd ..
addpath(genpath('../CS_JPEG_demo'));

csr = [0.02:0.01:0.05, 0.06:0.02:0.10, 0.15:0.05:0.25];
%%
h8 = figure(100); clf;
for nim = 1:8
    switch  nim
        case 1
            filename = 'barbara';
        case 2
            filename = 'boats'; 
        case 3
            filename = 'cameraman';
        case 4
            filename = 'foreman';
        case 5
            filename = 'house';
        case 6
            filename = 'lena256';
        case 7
            filename = 'Monarch';
        case 8
            filename = 'Parrots';
    end
    
    % read the ground truth image to compute the PSNR and SSIM
    I0 = imread(['.\test_data\Image\' filename '.tif']);
    disp(['Start running image: ' filename]);
    
    cd ./JPEG_quant
    addpath(genpath('../JPEG_quant'));
    for ncs = 1:10;  % for different CS ratio
        % readfile
        disp(['Image: ' filename ', CSr: ' num2str(csr(ncs))]);
        for nf = 1:2  % for different sensing matrix
            switch nf
                case 1  % 2D-WHT sensing matrix
                    cs_file = ['..\test_data\Image\' filename '\' filename '-' num2str(ncs) '-1.cs'];
                    disp(['Image: ' filename ', CSr: ' num2str(csr(ncs)) ', Sensing matrix: 2D-WHT']);
                case 2  % 2D-DCT sensing matrix
                    cs_file = ['..\test_data\Image\' filename '\' filename '-' num2str(ncs) '-2.cs'];
                     disp(['Image: ' filename ', CSr: ' num2str(csr(ncs)) ', Sensing matrix: 2D-DCT']);
            end
            
            f = dir(cs_file);
            filesize(nim,ncs,nf) = f.bytes; % get file size
            
            % read file and dequantize the measurement
            [qy, coding_info, sat_ind, qm] = CSUnquantize(cs_file);

            algo_all = {'GAP_TV','DAMP','NLR_CS'}; % algorithms used
            for nAlg = 1:length(algo_all)
            % Reconstruct from quantized measurements
             clear dec_opts
             dec_opts = struct('alg', algo_all(nAlg));
            
             [rec_q, rec_q_raw] = CSImgReconstruct(qy, coding_info, dec_opts);
             im_rec{nim,ncs,nAlg,nf} = uint8(round(rec_q_raw));
             
             PSNR_all(nim,ncs, nAlg,nf) = psnr(im_rec{nim,ncs,nAlg,nf}, I0);
             SSIM_all(nim,ncs, nAlg,nf) = ssim(im_rec{nim,ncs,nAlg,nf}, I0);
              disp([algo_all(nAlg) ' done...']);
            end
        end
        
    end
   
    
    figure(h8); 
    
    subplot(2,4,nim);
    %clf;
    cd ..
     load(['.\test_data\Image\' filename '.jpg_qual\JPEG_qual.mat']);
    sav_bytes_jpeg = sav_bytes;
    sav_ssim_jpeg = sav_ssim;
    load(['.\test_data\Image\' filename '.jpeg2000_qual\JPEG2000_qual.mat'])
    sav_bytes_jpeg2000 = sav_bytes;
    sav_ssim_jpeg2000 = sav_ssim;

    plot(sav_bytes_jpeg,sav_ssim_jpeg,'k-','LineWidth',2);
    hold on
    plot(sav_bytes_jpeg2000,sav_ssim_jpeg2000,'k--','LineWidth',2);
    hold on
    plot(filesize(nim,:,1),squeeze(SSIM_all(nim,:, 1,1)),'b--');
    hold on;
    plot(filesize(nim,:,1),squeeze(SSIM_all(nim,:, 2,1)),'g--');
     hold on;
    plot(filesize(nim,:,1),squeeze(SSIM_all(nim,:, 3,1)),'r--');
    hold on
    plot(filesize(nim,:,2),squeeze(SSIM_all(nim,:, 1,2)),'b-');
    hold on;
    plot(filesize(nim,:,2),squeeze(SSIM_all(nim,:, 2,2)),'g-');
     hold on;
    plot(filesize(nim,:,2),squeeze(SSIM_all(nim,:, 3,2)),'r-');
    
    set(gca,'FontSize',12)
    xlabel('Compressed file size (Bytes)','FontSize',12)
    ylabel('Structural Similarity (SSIM)','FontSize',12)
     title(filename);
     
     h = figure(10); clf;
     
      plot(sav_bytes_jpeg,sav_ssim_jpeg,'k-','LineWidth',2);
    hold on
    plot(sav_bytes_jpeg2000,sav_ssim_jpeg2000,'k--','LineWidth',2);
    hold on
    plot(filesize(nim,:,1),squeeze(SSIM_all(nim,:, 1,1)),'b--');
    hold on;
    plot(filesize(nim,:,1),squeeze(SSIM_all(nim,:, 2,1)),'g--');
     hold on;
    plot(filesize(nim,:,1),squeeze(SSIM_all(nim,:, 3,1)),'r--');
    hold on
    plot(filesize(nim,:,2),squeeze(SSIM_all(nim,:, 1,2)),'b-');
    hold on;
    plot(filesize(nim,:,2),squeeze(SSIM_all(nim,:, 2,2)),'g-');
     hold on;
    plot(filesize(nim,:,2),squeeze(SSIM_all(nim,:, 3,2)),'r-');
    
    set(gca,'FontSize',12)
    xlabel('Compressed file size (Bytes)','FontSize',12)
    ylabel('Structural Similarity (SSIM)','FontSize',12)
     title(filename);
     legend('JPEG', 'JPEG 2000', 'CS (GAP-TV), SRM-WHT','CS (D-AMP), SRM-WHT','CS (NLR-CS), SRM-WHT',...
    'CS (GAP-TV), SRM-DCT','CS (D-AMP), SRM-DCT','CS (NLR-CS), SRM-DCT','Location','southeast');
saveas(h, ['.\Temp_results\' filename '_JPEG_CS_3Algo_2DDCTWHT_readfile_rec.fig']);
saveas(h, ['.\Temp_results\' filename '_JPEG_CS_3Algo_2DDCTWHT_readfile_rec.png']);
     
    pause(0.1);
end

figure(h8);
legend('JPEG', 'JPEG 2000', 'CS (GAP-TV), SRM-WHT','CS (D-AMP), SRM-WHT','CS (NLR-CS), SRM-WHT',...
    'CS (GAP-TV), SRM-DCT','CS (D-AMP), SRM-DCT','CS (NLR-CS), SRM-DCT','Location','southeast');

save(['.\Temp_results\' filename '_all3_SRM_DCTWHTsensing_readfile_rec.mat'], '-v7.3','im_rec','PSNR_all','SSIM_all','filesize');
