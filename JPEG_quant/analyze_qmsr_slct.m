function analyze_qmsr_slct(img_dir, fig_num, cnstrnts, lims)
  % analyze_img analyzes statistics files generated by run_quant_test and
  % test_quant_set.
  
  if nargin < 4
    lims = struct();
  end
  
  [~,img_name,~] = fileparts(img_dir);
  
  load(fullfile(img_dir, 'results.mat'), 'stats','enc_opts');
  
  if nargin >= 3
    use_enc = false(size(enc_opts)); %#ok
    for k =1:numel(enc_opts)
      for j=1:numel(cnstrnts)
        if iscell(cnstrnts)
          ok = chk_analyze_cnstrnt(enc_opts(k), cnstrnts{j});
        else
          ok = chk_analyze_cnstrnt(enc_opts(k), cnstrnts(j));
        end
        if ok
          use_enc(k) = true;
          break;
        end
      end
    end
    
    enc_opts = enc_opts(use_enc);
    stats = stats(use_enc);   %#ok
    
  end
  
  bit_per_used_msr = ...
    [stats(:).n_byte] * 8 ./ ([stats(:).n_msrs] - [stats(:).n_sat_msrs]);
          
  figure(fig_num);
  clf;
  
  hold on
  title([img_name ' - by quant_step'], 'Interpreter', 'none');  

  csr = unique([enc_opts(:).msrmnt_input_ratio]);
  csr = sort(csr); 
  csr_name = @(k) sprintf('r%03d',csr(k)*1000);
  sns_mtrx = struct('type', unique(arrayfun(@(x) {x.msrmnt_mtrx.type}, enc_opts(:))));
  if length(sns_mtrx) > 1
    sns_mtrx_name = regexprep({sns_mtrx(:).type}, 'SensingMatrix','');
  else
    sns_mtrx_name = {''};
  end
  q_ampl = cell(length(sns_mtrx),1);
  for k=1:length(sns_mtrx)
    opts = enc_opts(arrayfun(@(x) strcmp(x.msrmnt_mtrx.type, sns_mtrx(k).type), enc_opts(:)));
    q_ampl{k} = unique([opts(:).qntzr_ampl_stddev]);
    q_ampl{k} = sort(q_ampl{k},'descend');
  end
  q_ampl_name = @qAmplName;
  q_save = unique([enc_opts(:).qntzr_outrange_action]);
  if length(q_save) == 1
    q_save_name = {''};
  else
    q_save = sort(q_save, 'ascend');
    q_save_name = {'sF','sT'};
  end
  
  function nm = qAmplName(k,m)
    if length(q_ampl{k}) > 1
      nm = ['a', num2str(q_ampl{k}(m))];
    else
      nm = '';
    end
  end
  
  smtrx = [enc_opts(:).msrmnt_mtrx];
  
  clrs = {'b','b','r','r'};
  mrkrs = {'x', '^', '+', 's' 'd'};
  dashed = {'-', '--'};
  lnspec = @(idx) [dashed{1+mod(idx-1,length(dashed))}, ...
    clrs{1+mod(idx-1,length(clrs))}, mrkrs{1+mod(idx-1,length(mrkrs))}];
  l_indx=0;
  for iratio=1:length(csr)
    for imtrx=1:length(sns_mtrx)
      for isv=1:length(q_save)
        for iampl=1:length(q_ampl{imtrx})
          indx = find(...
            strcmp({smtrx(:).type},sns_mtrx(imtrx).type) & ...
            [enc_opts(:).qntzr_outrange_action] == q_save(isv) & ...
            [enc_opts(:).qntzr_ampl_stddev] == q_ampl{imtrx}(iampl) & ...
            [enc_opts(:).msrmnt_input_ratio] == csr(iratio));
          merr = [stats(indx).msrs_db_rms];
          bpm = bit_per_used_msr(indx);
          l_indx = l_indx+1;
          lspc = lnspec(l_indx);
          lname = [sns_mtrx_name{imtrx} q_save_name{isv} ...
            q_ampl_name(imtrx,iampl) csr_name(iratio)];
          if isempty(lname)
            lname = 'CS';
          end
          plot(bpm, merr, lspc, 'DisplayName', lname);          
        end
      end
    end
  end
  
  ylabel('Q.Err/Msrs (dB)'); xlabel('bits per used msrmnt'); 
  
  if isfield(lims, 'xlim')
    bpm_lim = lims.xlim;
  else
    bpm_lim = [min(bit_per_used_msr),max(bit_per_used_msr)];
  end
  if isfield(lims, 'ylim')
    merr_lim = lims.ylim;
  else
    merr_lim = [min([stats(:).msrs_db_rms]),max([stats(:).msrs_db_rms])];
  end
  xlim(bpm_lim); ylim(merr_lim);
  lgnd = legend('show','Location','eastoutside');
  lgnd.FontSize = 10;
  
end