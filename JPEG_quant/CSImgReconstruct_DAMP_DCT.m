function [img, raw_img] = CSImgReconstruct_DAMP_DCT(y, para, A, At )
  % CSImgReconstruct_DAMP reconstructs an image from measurements using DAMP
  % 
  % Input:
  %   y: measurements vector
  %   para: a struct containing parameters. Required fields:
  %           row: number of rows in the image
  %           col: number of columns in the image
  %         optional fields (with defaults)
  %           iter: number of iterations [30]
  %           denoiser: denoiser string ['BM3D']
  %   A: A function handle such that A(x) is the sensing matrix times x
  %   At: A function handle such that A(x) is the transposed sensing matrix
  %       times x, divided by the square of the norm  of the matrix.
  % Output:
  %   img: The normalized image
  %   raw_img: The output of the reconstruction algorithm, before, normalization
  %           
  
  if ~isfield(para, 'iter')
    para.iter = 30;
  end
  if ~isfield(para, 'denoiser')
    para.denoiser = 'BM3D';
  end
  
  % prevent processing on GPU
  y = gather(y);
  
  y = double(y);
  % detect if generated by DWT
%   if max(y) < 1000
%     y = y*256;
%   end
  
%   tic();  % Required by DAMP()
  %raw_img = DAMP(y, para.iter, para.row, para.col, para.denoiser, A, At);
  %raw_img = DAMP_dwt_tune(y, para.iter, para.row, para.col, para.denoiser, A, At); % this is for DWT
  raw_img = DAMP_dct_tune(y*255, para.iter, para.row, para.col, para.denoiser, A, At);
  %if(max(raw_img(:))>10)
  raw_img = uint8(round(max(min(raw_img,255),0)));
  img = im2double(raw_img);
  

end

