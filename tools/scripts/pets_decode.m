function [simul_io_data] = pets_decode(output_id, case_dir)
[mpath,~,~] = fileparts(mfilename('fullpath'));
cd(mpath)
cd ..
trunk = pwd;
if strcmp(filesep(),'\')
    m_str = '\\trunk$';
else
    m_str = sprintf('%strunk$', filesep());
end
if isempty(regexp(trunk, m_str, 'ONCE'))
    cd ..
end
cd ..
cd test_data
anls_opts = struct('fxd_trgt',true,...  %  all shifts with same set of measurmements
    'nrm_exp',1,... % L1 norm in comparisons
    'm_range','&[6,6;2,2]', ...
    'm_step_numer','&[1,1;1,1]', ...
    'm_step_denom','&[1;2]', ...
    'ignore_edge',1,...
    'chk_bgrnd', struct('mx_avg',0, 'mn_dcd',2, 'thrsh', 2)...
    );
dec_opts = struct();
io_types = {'input','enc_vid','mat','ref_mark','dec_slct_mark',...
  'dec_anls', 'dec_sav'};
proc_opts=struct('output_id', output_id, ...
  'case_id','1', ...
  'dec_id', '*',...
  'par_cases', 0,...
  'par_files', false,...
  'io_types',{io_types});
files_def='<PETS2000_test_enc.json';
if nargin < 2
  simul_io_data = CSVidDecoder.doSimulation(anls_opts, dec_opts,...
    files_def, proc_opts);
else
  proc_opts.case_dir = case_dir;
  simul_io_data = CSVidDecoder.doSimulationCase(anls_opts, dec_opts,...
    files_def, proc_opts);
end
end
