% This scripts generates measurements using DFT with local randomization
% (no quantization).
[mpath,~,~] = fileparts(mfilename('fullpath'));
cd(mpath)
cd ..
cd ..
cd test_data
N=8;
DFT_lcl = struct('type','SensingMatrixLclDFT','args',struct('num_rows',1/N));
DCT_lcl = struct('type','SensingMatrixLclDCT','args',struct('num_rows',1/N));
WH_lcl = struct('type','SensingMatrixLclWH','args',struct('num_rows',1/N));
DFT_glbl = struct('type','SensingMatrixDFT','args',struct('num_rows',1/N));
DCT_glbl = struct('type','SensingMatrixDCT','args',struct('num_rows',1/N));
WH_glbl = struct('type','SensingMatrixWH','args',struct('num_rows',1/N));
DFT_nr = struct('type','SensingMatrixDFTMotn','args',struct('num_rows',1/N));
DCT_nr = struct('type','SensingMatrixNrDCT','args',struct('num_rows',1/N));
WH_nr = struct('type','SensingMatrixNrWH','args',struct('num_rows',1/N));
enc_opts = struct(...
    'n_frames',60,...
    'process_color',false,...
    'random',struct('seed',1000),...
    'blk_size','&[72 88 12]',...
    'msrmnt_mtrx',{{...
      struct('type','SensingMatrixConcat', 'args', struct('mtrcs', ... 
        {{DFT_lcl, DFT_lcl, DFT_lcl, DFT_lcl, DFT_lcl, DFT_lcl, DFT_lcl, DFT_lcl}})),...
      struct('type','SensingMatrixConcat', 'args', struct('mtrcs', ... 
        {{DCT_lcl, DCT_lcl, DCT_lcl, DCT_lcl, DCT_lcl, DCT_lcl, DCT_lcl, DCT_lcl}})),...
      struct('type','SensingMatrixConcat', 'args', struct('mtrcs', ... 
        {{WH_lcl, WH_lcl, WH_lcl, WH_lcl, WH_lcl, WH_lcl, WH_lcl, WH_lcl}})),...
      struct('type','SensingMatrixConcat', 'args', struct('mtrcs', ... 
        {{DFT_glbl, DFT_glbl, DFT_glbl, DFT_glbl, DFT_glbl, DFT_glbl, DFT_glbl, DFT_glbl}})),...
      struct('type','SensingMatrixConcat', 'args', struct('mtrcs', ... 
        {{DCT_glbl, DCT_glbl, DCT_glbl, DCT_glbl, DCT_glbl, DCT_glbl, DCT_glbl, DCT_glbl}})),...
      struct('type','SensingMatrixConcat', 'args', struct('mtrcs', ... 
        {{WH_glbl, WH_glbl, WH_glbl, WH_glbl, WH_glbl, WH_glbl, WH_glbl, WH_glbl}})),...
      struct('type','SensingMatrixConcat', 'args', struct('mtrcs', ... 
        {{DFT_nr, DFT_nr, DFT_nr, DFT_nr, DFT_nr, DFT_nr, DFT_nr, DFT_nr}})),...
      struct('type','SensingMatrixConcat', 'args', struct('mtrcs', ... 
        {{DCT_nr, DCT_nr, DCT_nr, DCT_nr, DCT_nr, DCT_nr, DCT_nr, DCT_nr}})),...
      struct('type','SensingMatrixConcat', 'args', struct('mtrcs', ... 
        {{WH_nr, WH_nr, WH_nr, WH_nr, WH_nr, WH_nr, WH_nr, WH_nr}}))...
%       struct('type','SensingMatrixLclDFT', 'args',struct()),...
%       struct('type','SensingMatrixLclDCT', 'args',struct()),...
%       struct('type','SensingMatrixLclWH', 'args',struct()),...
%       struct('type','SensingMatrixDFT', 'args',struct()),...
%       struct('type','SensingMatrixDCT', 'args',struct()),...
%       struct('type','SensingMatrixWH', 'args',struct()),...
%       struct('type','SensingMatrixDFTMotn', 'args',struct()),...
%       struct('type','SensingMatrixNrDCT', 'args',struct()),...
%       struct('type','SensingMatrixNrWH', 'args',struct())...
    }},...
    'msrmnt_input_ratio', N,...
    'qntzr_wdth_mltplr',0,...
    'qntzr_ampl_stddev',10000);
anls_opts = [];
dec_opts = [];
proc_opts = struct('output_id','msrs_*','case_id','<Mt>_<Bs>', ...
    'par_cases', length(enc_opts.msrmnt_mtrx));
files_def = '<foreman_news_io.json';
sml_io =  CSVidCodec.doSimulation(enc_opts,anls_opts,dec_opts,files_def, proc_opts);